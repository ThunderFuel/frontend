/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.38.1
  Forc version: 0.35.5
  Fuel-Core version: 0.17.3
*/

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { PoolAbi, PoolAbiInterface } from "../PoolAbi";

const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 15,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 16,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 5,
          typeArguments: null,
        },
      ],
      typeParameters: [5],
    },
    {
      typeId: 5,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "str[12]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "str[19]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "str[25]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "str[31]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "str[32]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "str[33]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "str[34]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 13,
      type: "str[4]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 14,
      type: "str[8]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 15,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: "struct Deposit",
      components: [
        {
          name: "address",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 23,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: "struct OwnershipRenounced",
      components: [
        {
          name: "previous_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: "struct OwnershipSet",
      components: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 20,
      type: "struct OwnershipTransferred",
      components: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
        {
          name: "previous_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 21,
      type: "struct Transfer",
      components: [
        {
          name: "from",
          type: 3,
          typeArguments: null,
        },
        {
          name: "to",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 23,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 22,
      type: "struct Withdrawal",
      components: [
        {
          name: "address",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 23,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 23,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "account",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "balance_of",
      output: {
        name: "",
        type: 23,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "deposit",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [],
      name: "get_asset_manager",
      output: {
        name: "",
        type: 16,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_exchange",
      output: {
        name: "",
        type: 16,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "exchange",
          type: 16,
          typeArguments: null,
        },
        {
          name: "asset_manager",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "name",
      output: {
        name: "",
        type: 6,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 4,
        typeArguments: [
          {
            name: "",
            type: 3,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "renounce_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset_manager",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "set_asset_manager",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "symbol",
      output: {
        name: "",
        type: 13,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
      ],
      name: "total_supply",
      output: {
        name: "",
        type: 23,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "from",
          type: 3,
          typeArguments: null,
        },
        {
          name: "to",
          type: 3,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 23,
          typeArguments: null,
        },
      ],
      name: "transfer_from",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "new_owner",
          type: 3,
          typeArguments: null,
        },
      ],
      name: "transfer_ownership",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset",
          type: 16,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 23,
          typeArguments: null,
        },
      ],
      name: "withdraw",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "withdraw_all",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: null,
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 17,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 7,
        typeArguments: null,
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 19,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 12,
        typeArguments: null,
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 18,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 11,
        typeArguments: null,
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 9,
        typeArguments: null,
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 21,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 14,
        typeArguments: null,
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 20,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 10,
        typeArguments: null,
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: null,
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 22,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class PoolAbi__factory {
  static readonly abi = _abi;
  static createInterface(): PoolAbiInterface {
    return new Interface(_abi) as unknown as PoolAbiInterface;
  }
  static connect(id: string | AbstractAddress, accountOrProvider: Account | Provider): PoolAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as PoolAbi;
  }
}
